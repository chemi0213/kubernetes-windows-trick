apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: node-high-priority
value: 1000000
globalDefault: false
description: "This priority class is for high priority pods."
---
apiVersion: v1
kind: Namespace
metadata:
  name: ns-windows-management
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  namespace: ns-windows-management
  name: ds-windows-node-config
  annotations:
    # (Optional) Add annotation to reload the daemonset when the configmap changes
    configmap.reloader.stakater.com/reload: "cm-windows-node-cronjob"
  labels:
    app: windows-node-config
spec:
  selector:
    matchLabels:
      app: windows-node-config
  template:
    metadata:
      labels:
        app: windows-node-config
    spec:
      priorityClassName: node-high-priority
      securityContext:
        windowsOptions:
          hostProcess: true
          runAsUserName: "NT AUTHORITY\\SYSTEM"
      hostNetwork: true
      containers:
      - name: container-windows-node-cronjob
        image: mcr.microsoft.com/windows/servercore:ltsc2022
        command: ["powershell.exe"]
        args: ["-File", "C:\\tmp\\cronjob.ps1"]
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: script-volume
          mountPath: "C:\\tmp"
      volumes:
      - name: script-volume
        configMap:
          name: cm-windows-node-cronjob
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      nodeSelector:
        kubernetes.io/os: windows
      # (Optional) Taint the node to run the daemonset on spot instances
      tolerations:
      - key: "kubernetes.azure.com/scalesetpriority"
        operator: "Equal"
        value: "spot"
        effect: "NoSchedule"
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: ns-windows-management
  name: cm-windows-node-cronjob
  annotations:
    # (Optional) Add annotation to match the configmap with the daemonset
    reloader.stakater.com/match: "true"
data:
  cronjob.ps1: |
    function Set-ProceePriorutybyId {
        param (
            [int]$processId,
            [string]$desiredPriority
        )

        $process = Get-Process -Id $processId -ErrorAction SilentlyContinue
        if ($process) {
            if ($process.PriorityClass -ne $desiredPriority) {
                Write-Output "Setting priority of $processId to $desiredPriority"
                $process.PriorityClass = [System.Diagnostics.ProcessPriorityClass]::$desiredPriority
            } else {
                Write-Output "Priority of $processId is already $desiredPriority"
            }
        } else {
            Write-Output "Process with ID $processId not found"
        }
    }

    # Function to check and set process priority by name
    function Set-ProcessPrioritybyName {
        param (
            [string]$processName,
            [string]$desiredPriority
        )

        $processes = Get-Process -Name $processName -ErrorAction SilentlyContinue
        if ($processes) {
            foreach ($process in $processes) {
                if ($process.PriorityClass -ne $desiredPriority) {
                    Write-Output "Setting priority of $processName (PID: $($process.Id)) to $desiredPriority" | Tee-Object -FilePath $logFilePath -Append
                    $process.PriorityClass = [System.Diagnostics.ProcessPriorityClass]::$desiredPriority
                } else {
                    Write-Output "Priority of $processName (PID: $($process.Id)) is already $desiredPriority" | Tee-Object -FilePath $logFilePath -Append
                }
            }
        } else {
            Write-Output "$processName process not found" | Tee-Object -FilePath $logFilePath -Append
        }
    }

    # Function to check and set pagefile size
    function Set-PagefileSize {
        param (
            [string]$pagefilePath,
            [int]$desiredSizeGB
        )

        $desiredSizeMB = $desiredSizeGB * 1024

        $pagefileSettings = Get-WmiObject -Query "SELECT * FROM Win32_PageFileSetting Where Name='$pagefilePath'"
        if ($pagefileSettings) {
            $currentSizeMB = $pagefileSettings.MaximumSize
            if ($currentSizeMB -ne $desiredSizeMB) {
                Write-Output "Disabling automatic pagefile management" | Tee-Object -FilePath $logFilePath -Append
                $computersys = Get-WmiObject Win32_ComputerSystem -EnableAllPrivileges;
                $computersys.AutomaticManagedPagefile = $False;
                $computersys.Put();
                Write-Output "Setting pagefile size to $desiredSizeGB GB" | Tee-Object -FilePath $logFilePath -Append
                $pagefileSettings.InitialSize = $desiredSizeMB
                $pagefileSettings.MaximumSize = $desiredSizeMB
                $pagefileSettings.Put() | Out-Null

                Write-Output "Rebooting system to apply pagefile size changes" | Tee-Object -FilePath $logFilePath -Append
                Restart-Computer -Force
            } else {
                Write-Output "Pagefile size is already $desiredSizeGB GB" | Tee-Object -FilePath $logFilePath -Append
            }
        } else {
            Write-Output "Pagefile not found at $pagefilePath" | Tee-Object -FilePath $logFilePath -Append
        }
    }

    # Function to get pagefile size
    function Get-PagefileSize {
      $pageFileSettings = Get-WmiObject -Query "SELECT * FROM Win32_PageFileSetting"
      foreach ($setting in $pageFileSettings) {
          Write-Output "Caption: $($setting.Caption)" | Tee-Object -FilePath $logFilePath -Append
          Write-Output "Description: $($setting.Description)" | Tee-Object -FilePath $logFilePath -Append
          Write-Output "Element: $($setting.Element)" | Tee-Object -FilePath $logFilePath -Append
          Write-Output "InitialSize: $($setting.InitialSize)" | Tee-Object -FilePath $logFilePath -Append
          Write-Output "MaximumSize: $($setting.MaximumSize)" | Tee-Object -FilePath $logFilePath -Append
          Write-Output "Name: $($setting.Name)" | Tee-Object -FilePath $logFilePath -Append
          Write-Output "SettingID: $($setting.SettingID)" | Tee-Object -FilePath $logFilePath -Append
      }
    }

    function Pull-Image {
        param (
            [string]$imageName
        )

        try {
            Write-Output "Checking image $imageName..." | Tee-Object -FilePath $logFilePath -Append
            $localImage = crictl inspecti $imageName 2>&1

            if ($LASTEXITCODE -ne 0) {
                Write-Output "Image $imageName not found locally. Pulling..." | Tee-Object -FilePath $logFilePath -Append
                $output = crictl pull $imageName 2>&1

                if ($LASTEXITCODE -ne 0) {
                    throw "Failed to pull image $imageName. Error: $output"
                } else {
                    Write-Output "Successfully pulled image $imageName" | Tee-Object -FilePath $logFilePath -Append
                }
            } else {
                # Extract the image ID from the local image inspection
                $localImageId = ($localImage | ConvertFrom-Json).status.id
                Write-Output "Local  image ID: $localImageId" | Tee-Object -FilePath $logFilePath -Append

                # Pull the image to check for updates
                $output = crictl pull $imageName 2>&1

                if ($LASTEXITCODE -ne 0) {
                    throw "Failed to pull image $imageName. Error: $output"
                } else {
                    # Extract the image ID from the newly pulled image
                    $newImage = crictl inspecti $imageName 2>&1
                    $newImageId = ($newImage | ConvertFrom-Json).status.id
                    Write-Output "Latest image ID: $newImageId" | Tee-Object -FilePath $logFilePath -Append

                    if ($localImageId -eq $newImageId) {
                        Write-Output "Image $imageName is up to date." | Tee-Object -FilePath $logFilePath -Append
                    } else {
                        Write-Output "Image $imageName updated successfully." | Tee-Object -FilePath $logFilePath -Append
                    }
                }
            }
        } catch {
            Write-Error $_.Exception.Message | Tee-Object -FilePath $logFilePath -Append
        }
    }

    #
    # Variables and constants definition
    #
    # Set log file path
    $logFilePath = "C:\ds-output.log"

    # Sleep for n second before exiting
    $sleepDuration = 2147483

    # Set desired pagefile size in GB
    $desiredSizeGB = 20

    # Set preload images list
    $images = @(
      "registry.k8s.io/pause:3.10",
      "mcr.microsoft.com/windows/servercore:ltsc2022",
      "mcr.microsoft.com/windows/nanoserver:ltsc2022"
    )

    #
    # Main script execution
    #

    # Get computer name
    Write-Output "-----------------------------" | Tee-Object -FilePath $logFilePath -Append
    $computerName = [System.Environment]::MachineName
    $currentDateTime = Get-Date
    Write-Output "Computer Name: $computerName $currentDateTime" | Tee-Object -FilePath $logFilePath -Append

    Write-Output "[Phase 1] Checking and setting process priorities..." | Tee-Object -FilePath $logFilePath -Append
    Set-ProcessPrioritybyName -processName "containerd" -desiredPriority "High"
    Set-ProcessPrioritybyName -processName "kubelet" -desiredPriority "High"

    $hns_processId = Get-WmiObject Win32_Process | Where-Object { $_.CommandLine -like "*svchost*" -and $_.CommandLine -like "*hns*" } | Select-Object -ExpandProperty ProcessId
    Set-ProceePriorutybyId -processId $hns_processId -desiredPriority "High"
    Write-Output "" | Tee-Object -FilePath $logFilePath -Append

    Write-Output "[Phase 2] Checking and setting pagefile size..." | Tee-Object -FilePath $logFilePath -Append
    Get-PagefileSize
    Set-PagefileSize -pagefilePath "C:\\pagefile.sys" -desiredSizeGB $desiredSizeGB
    Write-Output "" | Tee-Object -FilePath $logFilePath -Append

    Write-Output "[Phase 3] Pulling specific images" | Tee-Object -FilePath $logFilePath -Append
    foreach ($image in $images) {
        Pull-Image -imageName $image
    }

    $currentDateTime = Get-Date
    Write-Output "$currentDateTime - Script execution completed" | Tee-Object -FilePath $logFilePath -Append
    Write-Output "-----------------------------" | Tee-Object -FilePath $logFilePath -Append
    Write-Output "" | Tee-Object -FilePath $logFilePath -Append

    Start-Sleep -Seconds $sleepDuration
    exit 0
